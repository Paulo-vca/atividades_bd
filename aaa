-- 1)
--SELECT * FROM cesta


--2)
-- SELECT id, nome, quant_minima, unidade_medida 
-- FROM Produto
-- ORDER BY quant_minima DESC


--3)
-- SELECT Cesta.codigo, Cesta.nome, Produto_cesta.quantidade, Produto.unidade_medida, Produto.nome
-- FROM Produto_cesta 
-- JOIN Produto ON Produto.id = Produto_cesta.produto_id
-- JOIN Cesta ON Cesta.codigo = Produto_cesta.cesta_codigo 
-- ORDER BY Cesta.codigo DESC, Produto.nome


--4)
-- SELECT Produto.id, Produto.nome, Mercado.nome, Produto.quant_minima, Pesquisa.preco, Produto.quant_minima*Pesquisa.preco AS "preco_total"
-- FROM Pesquisa 
-- JOIN Produto ON Produto.id = Pesquisa.produto_id
-- JOIN Mercado ON Mercado.id = Pesquisa.mercado_id
-- ORDER BY Produto.nome, Preco


--5)
-- SELECT Mercado.nome, Produto.id, Produto.nome, Produto.unidade_medida, Produto.quant_minima, Pesquisa.preco, Produto.quant_minima*Pesquisa.preco AS "preco_total"
-- FROM Pesquisa 
-- JOIN Produto ON Produto.id = Pesquisa.produto_id
-- JOIN Mercado ON Mercado.id = Pesquisa.mercado_id
-- WHERE Mercado.nome = 'Quitanda do Zé'
-- ORDER BY Produto.quant_minima*Pesquisa.preco DESC


--6)
SELECT Cesta.nome, Produto.nome, Mercado.nome, Produto_cesta.quantidade, Pesquisa.preco, Produto_cesta.quantidade*Pesquisa.preco AS "preco_total"
FROM Pesquisa 
JOIN Produto ON Pesquisa.produto_id = Produto.id
JOIN Mercado ON Pesquisa.mercado_id = Mercado.id
JOIN Cesta ON Produto_cesta.cesta_codigo = Cesta.codigo
JOIN Produto_cesta ON Produto.produto_id = Produto_cesta.id



-- FROM Produto_cesta 
-- JOIN Cesta ON Produto_cesta.cesta_codigo = Cesta.codigo
-- JOIN Produto ON Produto_cesta.produto_id = Produto.id
-- JOIN Pesquisa ON Produto_cesta.produto_id = Pesquisa.id
-- JOIN Mercado ON Pesquisa.mercado_id = Mercado.id

??????nao esta pronto o 6

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Exercicio em sala


Select codigo,nome_cidade,nome_pais,idioma.nome
from cidade 
JOIN pais ON pais_id = id
JOIN idioma ON idioma_principal = sigla	
where turistica = true
order by nome_pais desc,nome_cidade


23/09

-- Select codigo,nome_cidade,nome_pais,idioma.nome
-- from cidade 
-- JOIN pais ON pais_id = id
-- JOIN idioma ON idioma_principal = sigla	
-- where turistica = true
-- order by nome_pais desc,nome_cidade


-- SELECT funcionario.pessoa_id, nome, sexo, cidade.nome_cidade
-- FROM pessoa
-- JOIN cidade ON cidade_codigo = codigo
-- JOIN funcionario ON pessoa.id = pessoa_id
-- WHERE nome_cidade ILIKE 'campinas%' AND sexo = 'F'
-- ORDER BY nome


-- SELECT *
-- FROM Pessoa JOIN Cidade ON Pessoa.cidade_codigo = Cidade.codigo
-- 	JOIN Funcionario ON Funcionario.pessoa_id = Pessoa.id
-- 	JOIN Piloto ON Piloto.pessoa_id = Funcionario.pessoa_id
-- 	WHERE cidade.nome_cidade ilike 'são%'


-- SELECT COUNT(*) FROM fakenames


-- SELECT gender, COUNT (*)
-- FROM fakenames
-- GROUP BY gender


-- SELECT state, gender, COUNT (*)
-- FROM fakenames
-- GROUP BY state, gender
-- ORDER BY state DESC, gender


-- SELECT state, gender, max(age), min(age), COUNT(*),SUM(age),AVG(age), SUM(age) *1.0 / COUNT (*)
-- FROM fakenames
-- GROUP BY state, gender
-- ORDER BY AVG (age)


-- SELECT gender, bloodtype, COUNT(*)
-- FROM fakenames
-- GROUP BY gender, bloodtype
-- ORDER BY COUNT(*) DESC


-- SELECT givenname, age, CASE WHEN age >= 60 THEN 'IDOSO' ELSE 'JOVEM' END
-- FROM fakenames
-- ORDER BY givenname

-- SELECT givenname, age, 
-- 	CASE 
-- 	WHEN age >= 60 THEN 'IDOSO' 
-- 	WHEN age >= 40 THEN 'ADULTO' 
-- 	WHEN age >= 18 THEN 'JOVEM'
-- 	ELSE 'MENOR'
-- 	END
-- FROM fakenames
-- ORDER BY givenname


-- SELECT
-- 	CASE 
-- 	WHEN age >= 60 THEN 'IDOSO' 
-- 	WHEN age >= 40 THEN 'ADULTO' 
-- 	WHEN age >= 18 THEN 'JOVEM'
-- 	ELSE 'MENOR'
-- 	END,
-- 	COUNT(*)
-- FROM fakenames
-- GROUP BY 1
-- ORDER BY 2 DESC
--order by count(*) desc -- outro exemplo


-- SELECT
-- 	CASE 
-- 		WHEN age >= 60 THEN 'IDOSO' 
-- 		WHEN age >= 40 THEN 'ADULTO' 
-- 		WHEN age >= 18 THEN 'JOVEM'
-- 		ELSE 'MENOR'
-- 	END,
-- 	COUNT(*)
-- FROM fakenames
-- GROUP BY 
-- 	CASE 
-- 		WHEN age >= 60 THEN 'IDOSO' 
-- 		WHEN age >= 40 THEN 'ADULTO' 
-- 		WHEN age >= 18 THEN 'JOVEM'
-- 		ELSE 'MENOR'
-- 		END
-- ORDER BY 2 DESC


-- SELECT gender,
-- 	CASE 
-- 		WHEN age >= 60 THEN 'IDOSO' 
-- 		WHEN age >= 40 THEN 'ADULTO' 
-- 		WHEN age >= 18 THEN 'JOVEM'
-- 		ELSE 'MENOR'
-- 	END,
-- 	COUNT(*)
-- FROM fakenames
-- GROUP BY 1,2
-- ORDER BY 1,2 

-->>29/09>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

-- SELECT * FROM Fakenames
--todas alinhas da coluna = COUNT(*)

-- SELECT title, COUNT (*)
-- FROM Fakenames
-- GROUP BY title

-- SELECT gender, COUNT (*)
-- FROM Fakenames
-- GROUP BY gender

-- SELECT gender|| '-' || state,COUNT (*)
-- FROM Fakenames
-- GROUP BY gender, state
-- ORDER BY state, gender

-- SELECT gender|| '-' || state,COUNT (*), SUM(age)
-- FROM Fakenames
-- GROUP BY gender, state
-- ORDER BY state, gender

--errado
-- SELECT pessoa_id,pessoa.id
-- FROM Piloto,Pessoa
-- Order by

-->>30/09>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

-- SELECT now()

-- SELECT now(), date_part('day',now())
-- 	 date_part('cintury',now())


-- SELECT data_nasc, nome
-- FROM Pessoa

-- SELECT min(data_nasc), age(min(data_nasc)),
-- 	   max(data_nasc), age(max(data_nasc))
-- FROM Pessoa


-- SELECT min(data_nasc), age(min(data_nasc)),
-- 	   max(data_nasc), age(max(data_nasc)),
-- 	   age(min(data_nasc)) - age(max(data_nasc))
-- FROM Pessoa


-- SELECT RIGHT(nome_cidade,4), nome_cidade 
-- FROM Cidade;

-- SELECT
-- SUBSTRING(nome_cidade from position('(' in nome_cidade) + 1 for 2 ),nome_cidade
-- FROM Cidade


######################################################################################################

-- PAULO VINICIUS CRISTALDO ARGUELHO
-- TADS 3

-- Desenvolva as seguintes consultas na linguagem SQL:

-- 1. Nome dos funcionários;
-- 2. Data de nascimento dos pilotos;
-- 3. Nome e salário das pilotos do sexo feminino;
-- 4. CPF das aeromoças;
-- 5. Idade em anos das pessoas;
-- 6. Funcionários com idade menor que 50 anos;
-- 7. Lista de todos os pilotos ordenada por suas idades;
-- 8. Aeromoças com idade inferior a 40 anos com nome iniciando em A;
-- 9. CPF dos pilotos cujo nome iniciam em C;
-- 10. Nome e idade das aeromoças na época que fizeram o curso da ANAC;
-- 11. Aeromoças com mais que 5 anos de formação;
-- 12. Funcionários com telefones com prefixo 11;
-- 13. Funcionários com telefones com prefixo 64;
-- 14. Todos os domínios dos e-mails das pessoas;
-- 15. Todos os domínios dos e-mails dos funcionários;
-- 16. Domínios de e-mail finalizados em .com (sem repetição);
-- 17. Nomes, idades e e-mails dos funcionários com e-mail .com, com mais de 45 anos, morados de MS
-- e com salário superior a R$5000,00;
-- 18. E-mails que contém a palavra souza;
-- 19. Prenome dos pilotos com DDD 69 com CPF final par;
-- 20. Aeromoças (ou comissários) que também são pilotos;
-- 21. Aeromoças com mais de 50 anos que fizeram curso da ANAC a mais que 3 anos;
-- 22. Nome das aeromoças e idiomas por elas falados;
-- 23. Pilotos com mais que 50 anos que não moram no estado de SP;
-- 24. Funcionários com idade menor do que 45 anos que moram no estado de SP;
-- 25. Aeromoças com menos de 50 anos residentes no estado de SP;
-- 26. Quantidade de pessoas com mesmo prenome;
-- 27. Quantidade de pessoas com mesmo sobrenome;
-- 28. Média das idades das pessoas da família Pereira;
-- 29. Menor e maior idade de nascimento das pessoas com sobrenome Lima;
-- 30. Quantidade de pessoas que possuem telefone e CPF terminados com o mesmo dígito;
-- 31. Quantidade de pilotos do sexo feminino, moradoras em cada Estado;
-- 32. Estados que concentram mais do que 10 funcionários;
-- 33. Média salarial por cargo e sexo;
-- 34. Média de idade das aeromoças;
-- 35. Média de idade dos pilotos que moram no estado de SP;
-- 36. Nome das três cidades com o maior número de aeromoças;
-- 37. Quantidade de aeromoças moradoras em cada Cidade;
-- 38. Domínios de e-mail com maior frequência (aparecem mais);

--####################################################################################--

--- 1. Nome dos funcionários;
-- SELECT nome
-- FROM pessoa
-- JOIN funcionario ON pessoa.id = pessoa_id
-- ORDER BY nome


--- 2. Data de nascimento dos pilotos;
-- SELECT nome,Piloto.codigo_anac,pessoa.data_nasc
-- FROM pessoa
-- JOIN funcionario ON pessoa.id = pessoa_id
-- JOIN Piloto ON Piloto.pessoa_id = Funcionario.pessoa_id
-- ORDER BY nome


--- 3. Nome e salário das pilotos do sexo feminino;
-- SELECT nome,funcionario.salario
-- FROM pessoa
-- JOIN funcionario ON pessoa.id = pessoa_id
-- JOIN Piloto ON Piloto.pessoa_id = Funcionario.pessoa_id
-- WHERE sexo = 'F'
-- ORDER BY nome


--- 4. CPF das aeromoças;
-- SELECT nome,cpf
-- FROM Pessoa
-- JOIN Funcionario ON Pessoa.id = pessoa_id
-- JOIN Aeromoca ON Aeromoca.pessoa_id = Funcionario.pessoa_id
-- ORDER BY nome


--- 5. Idade em anos das pessoas;
-- SELECT age(data_nasc), date_part('year', age(data_nasc) )
-- FROM Pessoa


--- 6. Funcionários com idade menor que 50 anos;
--    SELECT nome,date_part('year', age(data_nasc) )
--    FROM pessoa
--    JOIN funcionario ON pessoa.id = pessoa_id
--    WHERE date_part('year', age(data_nasc) ) < 50


-- 7. Lista de todos os pilotos ordenada por suas idades;
--   SELECT nome,Piloto.codigo_anac, date_part('year', age(data_nasc) )
--   FROM pessoa
--   JOIN funcionario ON pessoa.id = pessoa_id
--   JOIN Piloto ON Piloto.pessoa_id = Funcionario.pessoa_id
--   ORDER BY date_part('year', age(data_nasc) )


-- 8. Aeromoças com idade inferior a 40 anos com nome iniciando em A;
--  SELECT nome,date_part('year', age(data_nasc) )
--  FROM Pessoa
--  JOIN Funcionario ON Pessoa.id = pessoa_id
--  JOIN Aeromoca ON Aeromoca.pessoa_id = Funcionario.pessoa_id
--  WHERE date_part('year', age(data_nasc)) < 40 and Pessoa.nome like 'A%' and sexo = 'F'
--  ORDER BY date_part('year', age(data_nasc))


-- 9. CPF dos pilotos cujo nome iniciam em C;
--  SELECT nome,Piloto.codigo_anac, cpf
--  FROM pessoa
--  JOIN funcionario ON pessoa.id = pessoa_id
--  JOIN Piloto ON Piloto.pessoa_id = Funcionario.pessoa_id
--  WHERE pessoa.nome like 'C%' 
--  ORDER BY nome
 

-- 10. Nome e idade das aeromoças na época que fizeram o curso da ANAC;
--   SELECT nome,date_part('year', age(data_nasc)) - date_part('year', age(data_curso_anac)) as "idade"
--   FROM Pessoa
--   JOIN Funcionario ON Pessoa.id = pessoa_id
--   JOIN Aeromoca ON Aeromoca.pessoa_id = Funcionario.pessoa_id


-- 11. Aeromoças com mais que 5 anos de formação;
--   SELECT nome,date_part('year', age(data_curso_anac))
--   FROM Pessoa
--   JOIN Funcionario ON Pessoa.id = pessoa_id
--   JOIN Aeromoca ON Aeromoca.pessoa_id = Funcionario.pessoa_id
--   WHERE date_part('year', age(data_curso_anac)) > 5
--   ORDER BY date_part('year', age(data_curso_anac))


-- 12. Funcionários com telefones com prefixo 11;
--   SELECT nome,telefone
--   FROM pessoa
--   JOIN funcionario ON pessoa.id = pessoa_id
--   WHERE pessoa.telefone like '(11)%'
--  ORDER BY nome


-- 13. Funcionários com telefones com prefixo 64;
--    SELECT nome,telefone
--    FROM pessoa
--    JOIN funcionario ON pessoa.id = pessoa_id
--    WHERE pessoa.telefone ilike '(64)%'
--    ORDER BY nome


-- 14. Todos os domínios dos e-mails das pessoas;
--  SELECT email
--  FROM pessoa
--  ORDER BY nome


-- 15. Todos os domínios dos e-mails dos funcionários;
--  SELECT email
--  FROM pessoa
--  JOIN funcionario ON pessoa.id = pessoa_id
--  ORDER BY nome


-- 16. Domínios de e-mail finalizados em .com (sem repetição);
--  SELECT DISTINCT email
--  FROM pessoa
--  WHERE pessoa.email like '%.com'

-- 17. Nomes, idades e e-mails dos funcionários com e-mail .com, com mais de 45 anos, morados de MS e com salário superior a R$5000,00;
 SELECT nome, date_part('year', age(data_nasc)), email, cidade.nome_cidade
 FROM pessoa
 JOIN cidade ON cidade_codigo = codigo
 JOIN funcionario ON pessoa.id = pessoa_id
 WHERE pessoa.email like '%.com' and date_part('year', age(data_nasc)) > 45 and nome_cidade like '%(MS)'


-- 18. E-mails que contém a palavra souza;
-- SELECT email
-- FROM pessoa
-- WHERE pessoa.email ilike '%SOUZA%'































